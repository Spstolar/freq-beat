# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_beatmanager.ipynb.

# %% auto 0
__all__ = ['store_beat', 'copy_note', 'shift_notes', 'alter_note']

# %% ../nbs/00_beatmanager.ipynb 3
import os

def store_beat(beat, beat_name):
    if not os.path.exists("beats"):
        os.mkdir('beats')
    filename = f"beats/{beat_name}.mid"
    print(f"Writing beat to {filename}.")
    beat.write(filename)

# %% ../nbs/00_beatmanager.ipynb 4
from pretty_midi import Note

def copy_note(note: Note, start=None, end=None, velocity=None, pitch=None):
    if start is None:
        start = note.start
    if end is None:
        end = note.end
    if velocity is None:
        velocity = note.velocity
    if pitch is None:
        pitch = note.pitch
    
    return Note(start=start, end=end, velocity=velocity, pitch=pitch)

def shift_notes(notes, shift_amount=None):
    if shift_amount is None:
        first_start = min([note.start for note in notes])
        shift_amount = -1 * first_start
    return [copy_note(note, start=note.start + shift_amount, end=note.end + shift_amount) for note in notes]

def alter_note(note: Note, ratio=None, new_velocity=None, new_pitch=None):
    if ratio is not None:
        new_start = note.start * ratio
        new_length = ratio * note.duration
        new_end = new_start + new_length
        return copy_note(note, start=new_start, end=new_end, velocity=new_velocity, pitch=new_pitch)
    else:
        start = note.start
    
        return copy_note(note, velocity=new_velocity, pitch=new_pitch)
